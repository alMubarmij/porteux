--- obconf-qt/src/obconf-qt.cpp	2024-04-24 17:01:29.377474126 +0200
+++ obconf-qt/src/obconf-qt.cpp.patched	2024-04-24 19:08:44.928835327 +0200
@@ -18,13 +18,17 @@
  * See the COPYING file for a copy of the GNU General Public License.
  */
 
+#include <QtGlobal>
+
 #include <glib.h>
 
 #include <QApplication>
 #include <QTranslator>
 #include <QLibraryInfo>
 #include <QLocale>
-#include <QX11Info>
+#if QT_VERSION < QT_VERSION_CHECK(6, 0, 0)
+  #include <QX11Info>
+#endif
 #include <QMessageBox>
 #include "maindialog.h"
 #include <X11/Xlib.h>
@@ -124,9 +128,16 @@
   gint ret_size;
   gulong ret_items, bytes_left;
 
-  res = XGetWindowProperty(QX11Info::display(), win, prop, 0l, G_MAXLONG,
+  #if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    auto display = qApp->nativeInterface<QNativeInterface::QX11Application>()->display();
+    res = XGetWindowProperty(display, win, prop, 0l, G_MAXLONG,
+                           FALSE, type, &ret_type, &ret_size,
+                           &ret_items, &bytes_left, &xdata);
+  #else
+    res = XGetWindowProperty(QX11Info::display(), win, prop, 0l, G_MAXLONG,
                            FALSE, type, &ret_type, &ret_size,
                            &ret_items, &bytes_left, &xdata);
+  #endif
 
   if(res == Success) {
     if(ret_size == size && ret_items > 0) {
@@ -163,7 +174,12 @@
   gchar* str;
   guint num;
 
-  if(get_all(win, prop, XInternAtom(QX11Info::display(), "UTF8_STRING", 0), 8, (guchar**)&raw, &num)) {
+  #if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    auto display = qApp->nativeInterface<QNativeInterface::QX11Application>()->display();
+    if(get_all(win, prop, XInternAtom(display, "UTF8_STRING", 0), 8, (guchar**)&raw, &num)) {
+  #else
+    if(get_all(win, prop, XInternAtom(QX11Info::display(), "UTF8_STRING", 0), 8, (guchar**)&raw, &num)) {
+  #endif
     str = g_strndup(raw, num); /* grab the first string from the list */
     g_free(raw);
 
@@ -180,18 +196,33 @@
 
 int main(int argc, char** argv) {
   QApplication app(argc, argv);
-  app.setAttribute(Qt::AA_UseHighDpiPixmaps, true);
+  
+  #if QT_VERSION < QT_VERSION_CHECK(6, 0, 0)
+    app.setAttribute(Qt::AA_UseHighDpiPixmaps, true);
+  #endif
 
   // load translations
   QTranslator qtTranslator, translator;
 
   // install the translations built-into Qt itself
-  qtTranslator.load(QStringLiteral("qt_") + QLocale::system().name(), QLibraryInfo::location(QLibraryInfo::TranslationsPath));
-  app.installTranslator(&qtTranslator);
+  #if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    if(qtTranslator.load(QStringLiteral("qt_") + QLocale::system().name(), QLibraryInfo::path(QLibraryInfo::TranslationsPath)))   {
+      app.installTranslator(&qtTranslator);
+    }
+  #else
+    qtTranslator.load(QStringLiteral("qt_") + QLocale::system().name(), QLibraryInfo::location(QLibraryInfo::TranslationsPath));
+    app.installTranslator(&qtTranslator);
+  #endif
 
   // install our own tranlations
-  translator.load(QStringLiteral("obconf-qt_") + QLocale::system().name(), QStringLiteral(PACKAGE_DATA_DIR) + QStringLiteral("/translations"));
-  app.installTranslator(&translator);
+  #if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    if(translator.load(QStringLiteral("obconf-qt_") + QLocale::system().name(), QStringLiteral(PACKAGE_DATA_DIR) + QStringLiteral("/translations"))) {
+      app.installTranslator(&translator);
+    }
+  #else
+    translator.load(QStringLiteral("obconf-qt_") + QLocale::system().name(), QStringLiteral(PACKAGE_DATA_DIR) + QStringLiteral("/translations"));
+    app.installTranslator(&translator);
+  #endif
 
   // load configurations
 
@@ -204,12 +235,27 @@
 
   paths = obt_paths_new();
   parse_i = obt_xml_instance_new();
-  int screen = QX11Info::appScreen();
-  rrinst = RrInstanceNew(QX11Info::display(), screen);
+  #if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    auto x11NativeInterface = qApp->nativeInterface<QNativeInterface::QX11Application>();
+    auto display = x11NativeInterface->display();
+    auto appRootWindow = XDefaultRootWindow(x11NativeInterface->display());
+    int screen = DefaultScreen(display);
+    rrinst = RrInstanceNew(display, screen);
+  #else
+    int screen = QX11Info::appScreen();
+    rrinst = RrInstanceNew(QX11Info::display(), screen);
+  #endif
+  
   if(!obc_config_file) {
     gchar* p;
-    if(prop_get_string_utf8(QX11Info::appRootWindow(screen),
-                            XInternAtom(QX11Info::display(), "_OB_CONFIG_FILE", 0), &p)) {
+    #if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+      if(prop_get_string_utf8(appRootWindow,
+                              XInternAtom(display, "_OB_CONFIG_FILE", 0), &p)) {
+    #else
+      if(prop_get_string_utf8(QX11Info::appRootWindow(screen),
+                              XInternAtom(QX11Info::display(), "_OB_CONFIG_FILE", 0), &p)) {
+    #endif
+
       obc_config_file = g_filename_from_utf8(p, -1, NULL, NULL, NULL);
       g_free(p);
     }
