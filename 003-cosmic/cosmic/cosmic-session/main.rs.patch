--- src/main.rs	2024-08-11 15:19:28.855497000 +0200
+++ src/main.rs.patched	2024-08-11 15:19:22.922625500 +0200
@@ -21,6 +21,7 @@
 use futures_util::StreamExt;
 use launch_pad::{process::Process, ProcessManager};
 use service::SessionRequest;
+#[cfg(feature = "systemd")]
 use systemd::{is_systemd_used, spawn_scope};
 use tokio::{
 	net::UnixStream,
@@ -42,26 +43,44 @@
 async fn main() -> Result<()> {
 	color_eyre::install().wrap_err("failed to install color_eyre error handler")?;
 
-	tracing_subscriber::registry()
-		.with(tracing_journald::layer().wrap_err("failed to connect to journald")?)
+	let trace = tracing_subscriber::registry();
+	let env_filter = EnvFilter::builder()
+		.with_default_directive(LevelFilter::INFO.into())
+		.from_env_lossy();
+
+	#[cfg(feature = "systemd")]
+	if let Ok(journald) = tracing_journald::layer() {
+		trace
+			.with(journald)
+			.with(fmt::layer())
+			.with(env_filter)
+			.try_init()
+			.wrap_err("failed to initialize logger")?;
+	} else {
+		trace
+			.with(fmt::layer())
+			.with(env_filter)
+			.try_init()
+			.wrap_err("failed to initialize logger")?;
+		warn!("failed to connect to journald")
+	}
+
+	#[cfg(not(feature = "systemd"))]
+	trace
 		.with(fmt::layer())
-		.with(
-			EnvFilter::builder()
-				.with_default_directive(LevelFilter::INFO.into())
-				.from_env_lossy(),
-		)
+		.with(env_filter)
 		.try_init()
 		.wrap_err("failed to initialize logger")?;
+
 	log_panics::init();
 
 	let (session_tx, mut session_rx) = tokio::sync::mpsc::channel(10);
 	let session_tx_clone = session_tx.clone();
 	let _conn = ConnectionBuilder::session()?
 		.name("com.system76.CosmicSession")?
-		.serve_at(
-			"/com/system76/CosmicSession",
-			service::SessionService { session_tx },
-		)?
+		.serve_at("/com/system76/CosmicSession", service::SessionService {
+			session_tx,
+		})?
 		.build()
 		.await?;
 
@@ -135,8 +154,8 @@
 		.await
 		.expect("failed to start settings daemon");
 
-	// notifying the user service manager that we've reached the graphical-session.target,
-	// which should only happen after:
+	// notifying the user service manager that we've reached the
+	// graphical-session.target, which should only happen after:
 	// - cosmic-comp is ready
 	// - we've set any related variables
 	// - cosmic-settings-daemon is ready
@@ -379,22 +398,17 @@
 					}
 					.instrument(stderr_span)
 				})
-				.with_on_start(move |pman, pkey, _will_restart| {
+				.with_on_start(move |pman, pkey, _will_restart| async move {
 					#[cfg(feature = "systemd")]
-					{
-						async move {
-							if *is_systemd_used() {
-								if let Ok((innr_cmd, Some(pid))) = pman.get_exe_and_pid(pkey).await
-								{
-									if let Err(err) = spawn_scope(innr_cmd.clone(), vec![pid]).await
-									{
-										warn!(
-													"Failed to spawn scope for {}. Creating transient unit failed with {}",
-													innr_cmd, err
-												);
-									};
-								}
-							}
+					if *is_systemd_used() {
+						if let Ok((innr_cmd, Some(pid))) = pman.get_exe_and_pid(pkey).await {
+							if let Err(err) = spawn_scope(innr_cmd.clone(), vec![pid]).await {
+								warn!(
+									"Failed to spawn scope for {}. Creating transient unit failed \
+									 with {}",
+									innr_cmd, err
+								);
+							};
 						}
 					}
 				})
@@ -437,4 +451,4 @@
 		)
 		.await
 		.unwrap_or_else(|_| panic!("failed to start {}", cmd));
-}
+}
\ No newline at end of file
